package com.example.myapplication;

import android.app.Activity;
import android.app.ActivityManager;
import android.content.Context;
import android.os.Build;
import android.os.Environment;
import android.os.StatFs;
import android.widget.ProgressBar;
import android.widget.TextView;

import androidx.annotation.RequiresApi;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

public class StorageMemory {
    private Context context;

    public StorageMemory(Context context) {
        this.context = context;
    }

    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)
    public static void setStorage(Context context) {
        TextView storage_usage = (TextView) ((Activity) context).findViewById(R.id.storage_usage);
        TextView storage_avail = (TextView) ((Activity) context).findViewById(R.id.storage_avail);
        TextView storage_percent = (TextView) ((Activity) context).findViewById(R.id.storage_percent);
        ProgressBar storage_progressbar = (ProgressBar) ((Activity) context).findViewById(R.id.storage_progressbar);
        //Read storage space
        File iPath = Environment.getDataDirectory();
        StatFs iStat = new StatFs(iPath.getPath());
        long iBlockSize = iStat.getBlockSizeLong();
        long iAvailableBlocks = iStat.getAvailableBlocksLong();
        long iTotalBlocks = iStat.getBlockCountLong();

        long iTotalSpace = iTotalBlocks * iBlockSize;
        long iAvailableSpace = iAvailableBlocks * iBlockSize;
        long iUsedSpace = iTotalSpace - iAvailableSpace;
        int storagePercentage = (int)((double) iUsedSpace / iTotalSpace * 100);

        storage_usage.setText(formatSize(context, iUsedSpace) + " in use");
        storage_avail.setText(formatSize(context, iAvailableSpace) + " available");
        storage_percent.setText(storagePercentage + "%");
        storage_progressbar.setProgress(storagePercentage);
    }

    public static void setMemory(Context context) {
        TextView memory_usage = (TextView) ((Activity) context).findViewById(R.id.memory_usage);
        TextView memory_avail = (TextView) ((Activity) context).findViewById(R.id.memory_avail);
        TextView memory_percent = (TextView) ((Activity) context).findViewById(R.id.memory_percent);
        ProgressBar memory_progressbar = (ProgressBar) ((Activity) context).findViewById(R.id.memory_progressbar);

        long totalMem = getTotalMem();
        long availMem = getAvailMem(context);
        long usedMem = totalMem - availMem;
        int memoryPercentage = (int)((double) usedMem / totalMem * 100);

        memory_usage.setText(formatSize(context, usedMem) + " in use");
        memory_avail.setText(formatSize(context, availMem) + " available");
        memory_percent.setText(memoryPercentage + "%");
        memory_progressbar.setProgress(memoryPercentage);
    }

    //helper function to convert bytes to human-readable byte unit
    private static final String formatSize(Context context, long size) {
        return android.text.format.Formatter.formatFileSize(context, size);
    }

    //returns available memory in bytes.
    private static long getAvailMem(Context context) {
        ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
        ActivityManager.MemoryInfo memoryInfo = new ActivityManager.MemoryInfo();
        activityManager.getMemoryInfo(memoryInfo);
        return memoryInfo.availMem;
    }

    //returns total memory in bytes.
    private static long getTotalMem() {
        String file = "/proc/meminfo";
        String memInfo;
        String[] strs;
        long memory = 0;
        try {
            FileReader fileReader = new FileReader(file);
            BufferedReader bufferedReader = new BufferedReader(fileReader, 8192);
            memInfo = bufferedReader.readLine();
            strs = memInfo.split("\\s+");
            memory = Integer.valueOf(strs[1]).intValue() ;
            bufferedReader.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return memory*1024;
    }
}
