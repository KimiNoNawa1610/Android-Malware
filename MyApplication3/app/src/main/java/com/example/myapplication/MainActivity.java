package com.example.myapplication;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import android.app.ActivityManager;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Point;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.StatFs;
import android.provider.Settings;
import android.view.View;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;

public class MainActivity extends AppCompatActivity {
    private Button start;
    final static int REQUEST_CODE = 378;
    final static int REQUEST_OVERLAY_PERMISSION = 379;

    String[] mainPermissions = new String[] {
            android.Manifest.permission.WRITE_EXTERNAL_STORAGE,
            android.Manifest.permission.READ_EXTERNAL_STORAGE
    };


    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        setStorageMemory();

        start=(Button) findViewById(R.id.button_optimize);
        //Get screen size
        Point size = new Point( );
        getWindowManager().getDefaultDisplay( ).getSize( size );
        FloatingWindow fw=new FloatingWindow();
        fw.setScreenSize(size.x,size.y);

        start.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    if (!Settings.canDrawOverlays(MainActivity.this)) {
                        Intent overlayIntent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,
                        Uri.parse("package:" + getPackageName()));
                        startActivityForResult(overlayIntent, REQUEST_OVERLAY_PERMISSION);
                    }
                }
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    if (checkAndRequestPermissions() && Settings.canDrawOverlays(MainActivity.this)) {
                        startService(new Intent(MainActivity.this,FloatingWindow.class));
                    }
                }
            }
        });
    }


    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        switch (requestCode) {
            case REQUEST_CODE:
                if (grantResults.length > 0) {
                    String permissionsDenied = "";
                    for (String permission : permissions) {
                        if (grantResults[0] == PackageManager.PERMISSION_DENIED) {
                            permissionsDenied += permission + " ";
                        }
                    }
                    if (permissionsDenied.equals("")) {
                        Toast.makeText(getApplicationContext(), "Permissions granted", Toast.LENGTH_SHORT).show();
                    } else {
                        Toast.makeText(getApplicationContext(), "Permissions Denied: " + permissionsDenied, Toast.LENGTH_LONG).show();
                    }
                }
                return;
        }
    }

    boolean checkAndRequestPermissions() {
        int result;
        List<String> permissionsNeeded = new ArrayList<>();
        for (String p : mainPermissions) {
            result = ContextCompat.checkSelfPermission(this, p);
            if (result != PackageManager.PERMISSION_GRANTED) {
                permissionsNeeded.add(p);
            }
        }
        if (!permissionsNeeded.isEmpty()) {
            ActivityCompat.requestPermissions(this, permissionsNeeded.toArray(new String[permissionsNeeded.size()]), REQUEST_CODE);
            return false;
        }
        return true;
    }

    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)
    public void setStorageMemory() {
        TextView storage_usage = findViewById(R.id.storage_usage);
        TextView storage_avail = findViewById(R.id.storage_avail);
        TextView storage_percent = findViewById(R.id.storage_percent);
        ProgressBar storage_progressbar = findViewById(R.id.storage_progressbar);
        //Read storage space
        File iPath = Environment.getDataDirectory();
        StatFs iStat = new StatFs(iPath.getPath());
        long iBlockSize = iStat.getBlockSizeLong();
        long iAvailableBlocks = iStat.getAvailableBlocksLong();
        long iTotalBlocks = iStat.getBlockCountLong();

        long iTotalSpace = iTotalBlocks * iBlockSize;
        long iAvailableSpace = iAvailableBlocks * iBlockSize;
        long iUsedSpace = iTotalSpace - iAvailableSpace;

        int storagePercentage = (int)((double) iUsedSpace / iTotalSpace * 100);
        storage_usage.setText(this.formatSize(iUsedSpace) + " in use");
        storage_avail.setText(this.formatSize(iAvailableSpace) + " available");
        storage_percent.setText(storagePercentage + "%");
        storage_progressbar.setProgress(storagePercentage);
    }

    //function to convert blocksize to appropriate byte unit
    private final String formatSize(long size) {
        //long size = size;
        String suffix = (String)null;
        if (size >= (long)1024) {
            suffix = "KB";
            size = size / (long)1024;
            if (size >= (long)1024) {
                suffix = "MB";
                size /= (long) 1024;
            }
        }

        StringBuilder resultBuffer = new StringBuilder(Long.toString(size));

        for(int commaOffset = resultBuffer.length() - 3; commaOffset > 0; commaOffset -= 3) {
            resultBuffer.insert(commaOffset, ',');
        }

        if (suffix != null) {
            resultBuffer.append(suffix);
        }

        return resultBuffer.toString();
    }

    public static long getAvailMem(Context ct) {
        ActivityManager activityManager = (ActivityManager) ct.getSystemService(Context.ACTIVITY_SERVICE);
        ActivityManager.MemoryInfo memoryInfo = new ActivityManager.MemoryInfo();
        activityManager.getMemoryInfo(memoryInfo);
        return memoryInfo.availMem;
    }


    public static long getTotalMem(Context ct) {
        String file = "/proc/meminfo";
        String memInfo;
        String[] strs;
        long memory = 0;

        try {
            FileReader fileReader = new FileReader(file);
            BufferedReader bufferedReader = new BufferedReader(fileReader, 8192);
            memInfo = bufferedReader.readLine();
            strs = memInfo.split("\\s+");
            for (String str : strs) {

            }
            memory = Integer.valueOf(strs[1]).intValue() ;
            bufferedReader.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return memory*1024;
    }

}